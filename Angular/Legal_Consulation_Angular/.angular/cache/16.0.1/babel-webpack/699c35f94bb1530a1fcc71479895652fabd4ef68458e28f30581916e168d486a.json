{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/SAGAR/VSCodes/Legal_Consulation_Angular/Legal_Consulation_Angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from '@angular/core';\nimport { EventEmitter, Injectable, Inject, NgModule, Optional, SkipSelf, Directive, Input } from '@angular/core';\nimport { BehaviorSubject, ReplaySubject, AsyncSubject, isObservable } from 'rxjs';\nimport { skip, filter, take } from 'rxjs/operators';\nimport { CommonModule } from '@angular/common';\nclass BaseLoginProvider {\n  constructor() {}\n  loadScript(id, src, onload, parentElement = null) {\n    // get document if platform is only browser\n    if (typeof document !== 'undefined' && !document.getElementById(id)) {\n      let signInJS = document.createElement('script');\n      signInJS.async = true;\n      signInJS.src = src;\n      signInJS.onload = onload;\n      if (!parentElement) {\n        parentElement = document.head;\n      }\n      parentElement.appendChild(signInJS);\n    }\n  }\n}\nclass SocialUser {}\nconst defaultInitOptions = {\n  oneTapEnabled: true\n};\nclass GoogleLoginProvider extends BaseLoginProvider {\n  constructor(clientId, initOptions) {\n    super();\n    this.clientId = clientId;\n    this.initOptions = initOptions;\n    this.changeUser = new EventEmitter();\n    this._socialUser = new BehaviorSubject(null);\n    this._accessToken = new BehaviorSubject(null);\n    this._receivedAccessToken = new EventEmitter();\n    this.initOptions = {\n      ...defaultInitOptions,\n      ...this.initOptions\n    };\n    // emit changeUser events but skip initial value from behaviorSubject\n    this._socialUser.pipe(skip(1)).subscribe(this.changeUser);\n    // emit receivedAccessToken but skip initial value from behaviorSubject\n    this._accessToken.pipe(skip(1)).subscribe(this._receivedAccessToken);\n  }\n  initialize(autoLogin) {\n    return new Promise((resolve, reject) => {\n      try {\n        this.loadScript(GoogleLoginProvider.PROVIDER_ID, 'https://accounts.google.com/gsi/client', () => {\n          google.accounts.id.initialize({\n            client_id: this.clientId,\n            auto_select: autoLogin,\n            callback: ({\n              credential\n            }) => {\n              const socialUser = this.createSocialUser(credential);\n              this._socialUser.next(socialUser);\n            },\n            prompt_parent_id: this.initOptions?.prompt_parent_id,\n            itp_support: this.initOptions.oneTapEnabled\n          });\n          if (this.initOptions.oneTapEnabled) {\n            this._socialUser.pipe(filter(user => user === null)).subscribe(() => google.accounts.id.prompt(console.debug));\n          }\n          if (this.initOptions.scopes) {\n            const scope = this.initOptions.scopes instanceof Array ? this.initOptions.scopes.filter(s => s).join(' ') : this.initOptions.scopes;\n            this._tokenClient = google.accounts.oauth2.initTokenClient({\n              client_id: this.clientId,\n              scope,\n              prompt: this.initOptions.prompt,\n              callback: tokenResponse => {\n                if (tokenResponse.error) {\n                  this._accessToken.error({\n                    code: tokenResponse.error,\n                    description: tokenResponse.error_description,\n                    uri: tokenResponse.error_uri\n                  });\n                } else {\n                  this._accessToken.next(tokenResponse.access_token);\n                }\n              }\n            });\n          }\n          resolve();\n        });\n      } catch (err) {\n        reject(err);\n      }\n    });\n  }\n  getLoginStatus() {\n    return new Promise((resolve, reject) => {\n      if (this._socialUser.value) {\n        resolve(this._socialUser.value);\n      } else {\n        reject(`No user is currently logged in with ${GoogleLoginProvider.PROVIDER_ID}`);\n      }\n    });\n  }\n  refreshToken() {\n    return new Promise((resolve, reject) => {\n      google.accounts.id.revoke(this._socialUser.value.id, response => {\n        if (response.error) reject(response.error);else resolve(this._socialUser.value);\n      });\n    });\n  }\n  getAccessToken() {\n    return new Promise((resolve, reject) => {\n      if (!this._tokenClient) {\n        if (this._socialUser.value) {\n          reject('No token client was instantiated, you should specify some scopes.');\n        } else {\n          reject('You should be logged-in first.');\n        }\n      } else {\n        this._tokenClient.requestAccessToken({\n          hint: this._socialUser.value?.email\n        });\n        this._receivedAccessToken.pipe(take(1)).subscribe(resolve);\n      }\n    });\n  }\n  revokeAccessToken() {\n    return new Promise((resolve, reject) => {\n      if (!this._tokenClient) {\n        reject('No token client was instantiated, you should specify some scopes.');\n      } else if (!this._accessToken.value) {\n        reject('No access token to revoke');\n      } else {\n        google.accounts.oauth2.revoke(this._accessToken.value, () => {\n          this._accessToken.next(null);\n          resolve();\n        });\n      }\n    });\n  }\n  signIn() {\n    return Promise.reject('You should not call this method directly for Google, use \"<asl-google-signin-button>\" wrapper ' + 'or generate the button yourself with \"google.accounts.id.renderButton()\" ' + '(https://developers.google.com/identity/gsi/web/guides/display-button#javascript)');\n  }\n  signOut() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      google.accounts.id.disableAutoSelect();\n      _this._socialUser.next(null);\n    })();\n  }\n  createSocialUser(idToken) {\n    const user = new SocialUser();\n    user.idToken = idToken;\n    const payload = this.decodeJwt(idToken);\n    user.id = payload.sub;\n    user.name = payload.name;\n    user.email = payload.email;\n    user.photoUrl = payload.picture;\n    user.firstName = payload['given_name'];\n    user.lastName = payload['family_name'];\n    return user;\n  }\n  decodeJwt(idToken) {\n    const base64Url = idToken.split(\".\")[1];\n    const base64 = base64Url.replace(/-/g, \"+\").replace(/_/g, \"/\");\n    const jsonPayload = decodeURIComponent(window.atob(base64).split(\"\").map(function (c) {\n      return \"%\" + (\"00\" + c.charCodeAt(0).toString(16)).slice(-2);\n    }).join(\"\"));\n    return JSON.parse(jsonPayload);\n  }\n}\n\n/**\n * The service encapsulating the social login functionality. Exposes methods like\n * `signIn`, `signOut`. Also, exposes an `authState` `Observable` that one can\n * subscribe to get the current logged in user information.\n *\n * @dynamic\n */\nGoogleLoginProvider.PROVIDER_ID = 'GOOGLE';\nclass SocialAuthService {\n  /** An `Observable` that one can subscribe to get the current logged in user information */\n  get authState() {\n    return this._authState.asObservable();\n  }\n  /** An `Observable` to communicate the readiness of the service and associated login providers */\n  get initState() {\n    return this._initState.asObservable();\n  }\n  /**\n   * @param config A `SocialAuthServiceConfig` object or a `Promise` that resolves to a `SocialAuthServiceConfig` object\n   */\n  constructor(config, _ngZone, _injector) {\n    this._ngZone = _ngZone;\n    this._injector = _injector;\n    this.providers = new Map();\n    this.autoLogin = false;\n    this._user = null;\n    this._authState = new ReplaySubject(1);\n    /* Consider making this an enum comprising LOADING, LOADED, FAILED etc. */\n    this.initialized = false;\n    this._initState = new AsyncSubject();\n    if (config instanceof Promise) {\n      config.then(config => {\n        this.initialize(config);\n      });\n    } else {\n      this.initialize(config);\n    }\n  }\n  initialize(config) {\n    this.autoLogin = config.autoLogin !== undefined ? config.autoLogin : false;\n    const {\n      onError = console.error\n    } = config;\n    config.providers.forEach(item => {\n      this.providers.set(item.id, 'prototype' in item.provider ? this._injector.get(item.provider) : item.provider);\n    });\n    Promise.all(Array.from(this.providers.values()).map(provider => provider.initialize(this.autoLogin))).then(() => {\n      if (this.autoLogin) {\n        const loginStatusPromises = [];\n        let loggedIn = false;\n        this.providers.forEach((provider, key) => {\n          const promise = provider.getLoginStatus();\n          loginStatusPromises.push(promise);\n          promise.then(user => {\n            this.setUser(user, key);\n            loggedIn = true;\n          }).catch(console.debug);\n        });\n        Promise.all(loginStatusPromises).catch(() => {\n          if (!loggedIn) {\n            this._user = null;\n            this._authState.next(null);\n          }\n        });\n      }\n      this.providers.forEach((provider, key) => {\n        if (isObservable(provider.changeUser)) {\n          provider.changeUser.subscribe(user => {\n            this._ngZone.run(() => {\n              this.setUser(user, key);\n            });\n          });\n        }\n      });\n    }).catch(error => {\n      onError(error);\n    }).finally(() => {\n      this.initialized = true;\n      this._initState.next(this.initialized);\n      this._initState.complete();\n    });\n  }\n  getAccessToken(providerId) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const providerObject = _this2.providers.get(providerId);\n      if (!_this2.initialized) {\n        throw SocialAuthService.ERR_NOT_INITIALIZED;\n      } else if (!providerObject) {\n        throw SocialAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND;\n      } else if (!(providerObject instanceof GoogleLoginProvider)) {\n        throw SocialAuthService.ERR_NOT_SUPPORTED_FOR_ACCESS_TOKEN;\n      }\n      return yield providerObject.getAccessToken();\n    })();\n  }\n  refreshAuthToken(providerId) {\n    return new Promise((resolve, reject) => {\n      if (!this.initialized) {\n        reject(SocialAuthService.ERR_NOT_INITIALIZED);\n      } else {\n        const providerObject = this.providers.get(providerId);\n        if (providerObject) {\n          if (typeof providerObject.refreshToken !== 'function') {\n            reject(SocialAuthService.ERR_NOT_SUPPORTED_FOR_REFRESH_TOKEN);\n          } else {\n            providerObject.refreshToken().then(user => {\n              this.setUser(user, providerId);\n              resolve();\n            }).catch(err => {\n              reject(err);\n            });\n          }\n        } else {\n          reject(SocialAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND);\n        }\n      }\n    });\n  }\n  refreshAccessToken(providerId) {\n    return new Promise((resolve, reject) => {\n      if (!this.initialized) {\n        reject(SocialAuthService.ERR_NOT_INITIALIZED);\n      } else if (providerId !== GoogleLoginProvider.PROVIDER_ID) {\n        reject(SocialAuthService.ERR_NOT_SUPPORTED_FOR_REFRESH_TOKEN);\n      } else {\n        const providerObject = this.providers.get(providerId);\n        if (providerObject instanceof GoogleLoginProvider) {\n          providerObject.revokeAccessToken().then(resolve).catch(reject);\n        } else {\n          reject(SocialAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND);\n        }\n      }\n    });\n  }\n  /**\n   * A method used to sign in a user with a specific `LoginProvider`.\n   *\n   * @param providerId Id with which the `LoginProvider` has been registered with the service\n   * @param signInOptions Optional `LoginProvider` specific arguments\n   * @returns A `Promise` that resolves to the authenticated user information\n   */\n  signIn(providerId, signInOptions) {\n    return new Promise((resolve, reject) => {\n      if (!this.initialized) {\n        reject(SocialAuthService.ERR_NOT_INITIALIZED);\n      } else {\n        let providerObject = this.providers.get(providerId);\n        if (providerObject) {\n          providerObject.signIn(signInOptions).then(user => {\n            this.setUser(user, providerId);\n            resolve(user);\n          }).catch(err => {\n            reject(err);\n          });\n        } else {\n          reject(SocialAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND);\n        }\n      }\n    });\n  }\n  /**\n   * A method used to sign out the currently loggen in user.\n   *\n   * @param revoke Optional parameter to specify whether a hard sign out is to be performed\n   * @returns A `Promise` that resolves if the operation is successful, rejects otherwise\n   */\n  signOut(revoke = false) {\n    return new Promise((resolve, reject) => {\n      if (!this.initialized) {\n        reject(SocialAuthService.ERR_NOT_INITIALIZED);\n      } else if (!this._user) {\n        reject(SocialAuthService.ERR_NOT_LOGGED_IN);\n      } else {\n        let providerId = this._user.provider;\n        let providerObject = this.providers.get(providerId);\n        if (providerObject) {\n          providerObject.signOut(revoke).then(() => {\n            resolve();\n            this.setUser(null);\n          }).catch(err => {\n            reject(err);\n          });\n        } else {\n          reject(SocialAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND);\n        }\n      }\n    });\n  }\n  setUser(user, id) {\n    if (user && id) user.provider = id;\n    this._user = user;\n    this._authState.next(user);\n  }\n}\nSocialAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND = 'Login provider not found';\nSocialAuthService.ERR_NOT_LOGGED_IN = 'Not logged in';\nSocialAuthService.ERR_NOT_INITIALIZED = 'Login providers not ready yet. Are there errors on your console?';\nSocialAuthService.ERR_NOT_SUPPORTED_FOR_REFRESH_TOKEN = 'Chosen login provider is not supported for refreshing a token';\nSocialAuthService.ERR_NOT_SUPPORTED_FOR_ACCESS_TOKEN = 'Chosen login provider is not supported for getting an access token';\nSocialAuthService.ɵfac = function SocialAuthService_Factory(t) {\n  return new (t || SocialAuthService)(i0.ɵɵinject('SocialAuthServiceConfig'), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i0.Injector));\n};\nSocialAuthService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: SocialAuthService,\n  factory: SocialAuthService.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(SocialAuthService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: ['SocialAuthServiceConfig']\n      }]\n    }, {\n      type: i0.NgZone\n    }, {\n      type: i0.Injector\n    }];\n  }, null);\n})();\n\n/**\n * The main module of angularx-social-login library.\n */\nclass SocialLoginModule {\n  static initialize(config) {\n    return {\n      ngModule: SocialLoginModule,\n      providers: [SocialAuthService, {\n        provide: 'SocialAuthServiceConfig',\n        useValue: config\n      }]\n    };\n  }\n  constructor(parentModule) {\n    if (parentModule) {\n      throw new Error('SocialLoginModule is already loaded. Import it in the AppModule only');\n    }\n  }\n}\nSocialLoginModule.ɵfac = function SocialLoginModule_Factory(t) {\n  return new (t || SocialLoginModule)(i0.ɵɵinject(SocialLoginModule, 12));\n};\nSocialLoginModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: SocialLoginModule\n});\nSocialLoginModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [SocialAuthService],\n  imports: [CommonModule]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(SocialLoginModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule],\n      providers: [SocialAuthService]\n    }]\n  }], function () {\n    return [{\n      type: SocialLoginModule,\n      decorators: [{\n        type: Optional\n      }, {\n        type: SkipSelf\n      }]\n    }];\n  }, null);\n})();\n\n// Simulates login / logout without actually requiring an Internet connection.\n//\n// Useful for certain development situations.\n//\n// For example, if you want to simulate the greatest football referee England has ever produced:\n//\n//  const dummyUser: SocialUser = {\n//     id: '0123456789',\n//     name: 'Howard Webb',\n//     email: 'howard@webb.com',\n//     firstName: 'Howard',\n//     lastName: 'Webb',\n//     authToken: 'dummyAuthToken',\n//     photoUrl: 'https://en.wikipedia.org/wiki/Howard_Webb#/media/File:Howard_Webb_march11.jpg',\n//     provider: 'DUMMY',\n//     idToken: 'dummyIdToken',\n//     authorizationCode: 'dummyAuthCode'\n// };\n//\n//  let config = new AuthServiceConfig([\n//  { ... },\n//  {\n//       id: DummyLoginProvider.PROVIDER_ID,\n//       provider: new DummyLoginProvider(dummyUser)  // Pass your user into the constructor\n//   },\n//  { ... }\n//  ]);\nclass DummyLoginProvider extends BaseLoginProvider {\n  constructor(dummy) {\n    super();\n    if (dummy) {\n      this.dummy = dummy;\n    } else {\n      this.dummy = DummyLoginProvider.DEFAULT_USER;\n    }\n    // Start not logged in\n    this.loggedIn = false;\n  }\n  getLoginStatus() {\n    return new Promise((resolve, reject) => {\n      if (this.loggedIn) {\n        resolve(this.dummy);\n      } else {\n        reject('No user is currently logged in.');\n      }\n    });\n  }\n  initialize() {\n    return new Promise((resolve, reject) => {\n      resolve();\n    });\n  }\n  signIn() {\n    return new Promise((resolve, reject) => {\n      this.loggedIn = true;\n      resolve(this.dummy);\n    });\n  }\n  signOut(revoke) {\n    return new Promise((resolve, reject) => {\n      this.loggedIn = false;\n      resolve();\n    });\n  }\n}\nDummyLoginProvider.PROVIDER_ID = 'DUMMY';\nDummyLoginProvider.DEFAULT_USER = {\n  id: '1234567890',\n  name: 'Mickey Mouse',\n  email: 'mickey@mouse.com',\n  firstName: 'Mickey',\n  lastName: 'Mouse',\n  authToken: 'dummyAuthToken',\n  photoUrl: 'https://en.wikipedia.org/wiki/File:Mickey_Mouse.png',\n  provider: 'DUMMY',\n  idToken: 'dummyIdToken',\n  authorizationCode: 'dummyAuthCode',\n  response: {}\n};\nclass FacebookLoginProvider extends BaseLoginProvider {\n  constructor(clientId, initOptions = {}) {\n    super();\n    this.clientId = clientId;\n    this.requestOptions = {\n      scope: 'email,public_profile',\n      locale: 'en_US',\n      fields: 'name,email,picture,first_name,last_name',\n      version: 'v10.0'\n    };\n    this.requestOptions = {\n      ...this.requestOptions,\n      ...initOptions\n    };\n  }\n  initialize() {\n    return new Promise((resolve, reject) => {\n      try {\n        this.loadScript(FacebookLoginProvider.PROVIDER_ID, `//connect.facebook.net/${this.requestOptions.locale}/sdk.js`, () => {\n          FB.init({\n            appId: this.clientId,\n            autoLogAppEvents: true,\n            cookie: true,\n            xfbml: true,\n            version: this.requestOptions.version\n          });\n          resolve();\n        });\n      } catch (err) {\n        reject(err);\n      }\n    });\n  }\n  getLoginStatus() {\n    return new Promise((resolve, reject) => {\n      FB.getLoginStatus(response => {\n        if (response.status === 'connected') {\n          let authResponse = response.authResponse;\n          FB.api(`/me?fields=${this.requestOptions.fields}`, fbUser => {\n            let user = new SocialUser();\n            user.id = fbUser.id;\n            user.name = fbUser.name;\n            user.email = fbUser.email;\n            user.photoUrl = 'https://graph.facebook.com/' + fbUser.id + '/picture?type=normal&access_token=' + authResponse.accessToken;\n            user.firstName = fbUser.first_name;\n            user.lastName = fbUser.last_name;\n            user.authToken = authResponse.accessToken;\n            user.response = fbUser;\n            resolve(user);\n          });\n        } else {\n          reject(`No user is currently logged in with ${FacebookLoginProvider.PROVIDER_ID}`);\n        }\n      });\n    });\n  }\n  signIn(signInOptions) {\n    const options = {\n      ...this.requestOptions,\n      ...signInOptions\n    };\n    return new Promise((resolve, reject) => {\n      FB.login(response => {\n        if (response.authResponse) {\n          let authResponse = response.authResponse;\n          FB.api(`/me?fields=${options.fields}`, fbUser => {\n            let user = new SocialUser();\n            user.id = fbUser.id;\n            user.name = fbUser.name;\n            user.email = fbUser.email;\n            user.photoUrl = 'https://graph.facebook.com/' + fbUser.id + '/picture?type=normal';\n            user.firstName = fbUser.first_name;\n            user.lastName = fbUser.last_name;\n            user.authToken = authResponse.accessToken;\n            user.response = fbUser;\n            resolve(user);\n          });\n        } else {\n          reject('User cancelled login or did not fully authorize.');\n        }\n      }, options);\n    });\n  }\n  signOut() {\n    return new Promise((resolve, reject) => {\n      FB.logout(response => {\n        resolve();\n      });\n    });\n  }\n}\nFacebookLoginProvider.PROVIDER_ID = 'FACEBOOK';\nclass AmazonLoginProvider extends BaseLoginProvider {\n  constructor(clientId, initOptions = {\n    scope: 'profile',\n    scope_data: {\n      profile: {\n        essential: false\n      }\n    },\n    redirect_uri: location.origin\n  }) {\n    super();\n    this.clientId = clientId;\n    this.initOptions = initOptions;\n  }\n  initialize() {\n    let amazonRoot = null;\n    if (document) {\n      amazonRoot = document.createElement('div');\n      amazonRoot.id = 'amazon-root';\n      document.body.appendChild(amazonRoot);\n    }\n    window.onAmazonLoginReady = () => {\n      amazon.Login.setClientId(this.clientId);\n    };\n    return new Promise((resolve, reject) => {\n      try {\n        this.loadScript('amazon-login-sdk', 'https://assets.loginwithamazon.com/sdk/na/login1.js', () => {\n          resolve();\n        }, amazonRoot);\n      } catch (err) {\n        reject(err);\n      }\n    });\n  }\n  getLoginStatus() {\n    return new Promise((resolve, reject) => {\n      let token = this.retrieveToken();\n      if (token) {\n        amazon.Login.retrieveProfile(token, response => {\n          if (response.success) {\n            let user = new SocialUser();\n            user.id = response.profile.CustomerId;\n            user.name = response.profile.Name;\n            user.email = response.profile.PrimaryEmail;\n            user.response = response.profile;\n            resolve(user);\n          } else {\n            reject(response.error);\n          }\n        });\n      } else {\n        reject(`No user is currently logged in with ${AmazonLoginProvider.PROVIDER_ID}`);\n      }\n    });\n  }\n  signIn(signInOptions) {\n    const options = {\n      ...this.initOptions,\n      ...signInOptions\n    };\n    return new Promise((resolve, reject) => {\n      amazon.Login.authorize(options, authResponse => {\n        if (authResponse.error) {\n          reject(authResponse.error);\n        } else {\n          amazon.Login.retrieveProfile(authResponse.access_token, response => {\n            let user = new SocialUser();\n            user.id = response.profile.CustomerId;\n            user.name = response.profile.Name;\n            user.email = response.profile.PrimaryEmail;\n            user.authToken = authResponse.access_token;\n            user.response = response.profile;\n            this.persistToken(authResponse.access_token);\n            resolve(user);\n          });\n        }\n      });\n    });\n  }\n  signOut() {\n    return new Promise((resolve, reject) => {\n      try {\n        amazon.Login.logout();\n        this.clearToken();\n        resolve();\n      } catch (err) {\n        reject(err.message);\n      }\n    });\n  }\n  persistToken(token) {\n    localStorage.setItem(`${AmazonLoginProvider.PROVIDER_ID}_token`, token);\n  }\n  retrieveToken() {\n    return localStorage.getItem(`${AmazonLoginProvider.PROVIDER_ID}_token`);\n  }\n  clearToken() {\n    localStorage.removeItem(`${AmazonLoginProvider.PROVIDER_ID}_token`);\n  }\n}\nAmazonLoginProvider.PROVIDER_ID = 'AMAZON';\nconst permissionTypes = {\n  notify: 1,\n  friends: 2,\n  photos: 4,\n  audio: 8,\n  video: 16,\n  offers: 32,\n  questions: 64,\n  pages: 128,\n  links: 256,\n  status: 1024,\n  notes: 2048,\n  messages: 4096,\n  wall: 8192,\n  ads: 32768,\n  offline: 65536,\n  docs: 131072,\n  groups: 262144,\n  notifications: 524288,\n  stats: 1048576,\n  email: 4194304,\n  market: 134217728\n};\nclass VKLoginProvider extends BaseLoginProvider {\n  constructor(clientId, initOptions = {\n    fields: 'photo_max,contacts',\n    version: '5.131'\n  }) {\n    super();\n    this.clientId = clientId;\n    this.initOptions = initOptions;\n    this.VK_API_URL = '//vk.com/js/api/openapi.js';\n    this.VK_API_GET_USER = 'users.get';\n  }\n  initialize() {\n    return new Promise((resolve, reject) => {\n      try {\n        this.loadScript(VKLoginProvider.PROVIDER_ID, this.VK_API_URL, () => {\n          VK.init({\n            apiId: this.clientId\n          });\n          resolve();\n        });\n      } catch (err) {\n        reject(err);\n      }\n    });\n  }\n  getLoginStatus() {\n    return new Promise(resolve => this.getLoginStatusInternal(resolve));\n  }\n  signIn(permissions) {\n    if (permissions?.includes('offers')) {\n      console.warn('The \"offers\" permission is outdated.');\n    }\n    if (permissions?.includes('questions')) {\n      console.warn('The \"questions\" permission is outdated.');\n    }\n    if (permissions?.includes('messages')) {\n      console.warn('The \"messages\" permission is unavailable for non-standalone applications.');\n    }\n    const scope = permissions?.reduce((accumulator, current) => {\n      const index = Object.keys(permissionTypes).findIndex(pt => pt === current);\n      return index > -1 ? accumulator + permissionTypes[current] : 0;\n    }, 0);\n    return new Promise(resolve => this.signInInternal(resolve, scope));\n  }\n  signOut() {\n    return new Promise(resolve => {\n      VK.Auth.logout(() => {\n        resolve();\n      });\n    });\n  }\n  signInInternal(resolve, scope) {\n    VK.Auth.login(loginResponse => {\n      if (loginResponse.status === 'connected') {\n        this.getUser(loginResponse.session.mid, loginResponse.session.sid, resolve);\n      }\n    }, scope);\n  }\n  getUser(userId, token, resolve) {\n    VK.Api.call(this.VK_API_GET_USER, {\n      user_id: userId,\n      fields: this.initOptions.fields,\n      v: this.initOptions.version\n    }, userResponse => {\n      resolve(this.createUser(Object.assign({}, {\n        token\n      }, userResponse.response[0])));\n    });\n  }\n  getLoginStatusInternal(resolve) {\n    VK.Auth.getLoginStatus(loginResponse => {\n      if (loginResponse.status === 'connected') {\n        this.getUser(loginResponse.session.mid, loginResponse.session.sid, resolve);\n      }\n    });\n  }\n  createUser(response) {\n    const user = new SocialUser();\n    user.id = response.id;\n    user.name = `${response.first_name} ${response.last_name}`;\n    user.photoUrl = response.photo_max;\n    user.authToken = response.token;\n    return user;\n  }\n}\n\n/**\n * Protocol modes supported by MSAL.\n */\nVKLoginProvider.PROVIDER_ID = 'VK';\nvar ProtocolMode;\n(function (ProtocolMode) {\n  ProtocolMode[\"AAD\"] = \"AAD\";\n  ProtocolMode[\"OIDC\"] = \"OIDC\";\n})(ProtocolMode || (ProtocolMode = {}));\nconst COMMON_AUTHORITY = 'https://login.microsoftonline.com/common/';\n/**\n * Microsoft Authentication using MSAL v2: https://github.com/AzureAD/microsoft-authentication-library-for-js/tree/dev/lib/msal-browser\n */\nclass MicrosoftLoginProvider extends BaseLoginProvider {\n  constructor(clientId, initOptions) {\n    super();\n    this.clientId = clientId;\n    this.initOptions = {\n      authority: COMMON_AUTHORITY,\n      scopes: ['openid', 'email', 'profile', 'User.Read'],\n      knownAuthorities: [],\n      protocolMode: ProtocolMode.AAD,\n      clientCapabilities: [],\n      cacheLocation: 'sessionStorage'\n    };\n    this.initOptions = {\n      ...this.initOptions,\n      ...initOptions\n    };\n  }\n  initialize() {\n    return new Promise((resolve, reject) => {\n      this.loadScript(MicrosoftLoginProvider.PROVIDER_ID, 'https://alcdn.msauth.net/browser/2.13.1/js/msal-browser.min.js', () => {\n        try {\n          const config = {\n            auth: {\n              clientId: this.clientId,\n              redirectUri: this.initOptions.redirect_uri ?? location.origin,\n              authority: this.initOptions.authority,\n              knownAuthorities: this.initOptions.knownAuthorities,\n              protocolMode: this.initOptions.protocolMode,\n              clientCapabilities: this.initOptions.clientCapabilities\n            },\n            cache: !this.initOptions.cacheLocation ? null : {\n              cacheLocation: this.initOptions.cacheLocation\n            }\n          };\n          this._instance = new msal.PublicClientApplication(config);\n          resolve();\n        } catch (e) {\n          reject(e);\n        }\n      });\n    });\n  }\n  getSocialUser(loginResponse) {\n    return new Promise((resolve, reject) => {\n      //After login, use Microsoft Graph API to get user info\n      let meRequest = new XMLHttpRequest();\n      meRequest.onreadystatechange = () => {\n        if (meRequest.readyState == 4) {\n          try {\n            if (meRequest.status == 200) {\n              let userInfo = JSON.parse(meRequest.responseText);\n              let user = new SocialUser();\n              user.provider = MicrosoftLoginProvider.PROVIDER_ID;\n              user.id = loginResponse.idToken;\n              user.authToken = loginResponse.accessToken;\n              user.name = loginResponse.idTokenClaims.name;\n              user.email = loginResponse.account.username;\n              user.idToken = loginResponse.idToken;\n              user.response = loginResponse;\n              user.firstName = userInfo.givenName;\n              user.lastName = userInfo.surname;\n              resolve(user);\n            } else {\n              reject(`Error retrieving user info: ${meRequest.status}`);\n            }\n          } catch (err) {\n            reject(err);\n          }\n        }\n      };\n      //Microsoft Graph ME Endpoint: https://docs.microsoft.com/en-us/graph/api/user-get?view=graph-rest-1.0&tabs=http\n      meRequest.open('GET', 'https://graph.microsoft.com/v1.0/me');\n      meRequest.setRequestHeader('Authorization', `Bearer ${loginResponse.accessToken}`);\n      try {\n        meRequest.send();\n      } catch (err) {\n        reject(err);\n      }\n    });\n  }\n  getLoginStatus() {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      const accounts = _this3._instance.getAllAccounts();\n      if (accounts?.length > 0) {\n        const loginResponse = yield _this3._instance.ssoSilent({\n          scopes: _this3.initOptions.scopes,\n          loginHint: accounts[0].username\n        });\n        return yield _this3.getSocialUser(loginResponse);\n      } else {\n        throw `No user is currently logged in with ${MicrosoftLoginProvider.PROVIDER_ID}`;\n      }\n    })();\n  }\n  signIn() {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      const loginResponse = yield _this4._instance.loginPopup({\n        scopes: _this4.initOptions.scopes,\n        prompt: _this4.initOptions.prompt\n      });\n      return yield _this4.getSocialUser(loginResponse);\n    })();\n  }\n  signOut(revoke) {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      const accounts = _this5._instance.getAllAccounts();\n      if (accounts?.length > 0) {\n        yield _this5._instance.logoutPopup({\n          account: accounts[0],\n          postLogoutRedirectUri: _this5.initOptions.logout_redirect_uri ?? _this5.initOptions.redirect_uri ?? location.href\n        });\n      }\n    })();\n  }\n}\nMicrosoftLoginProvider.PROVIDER_ID = 'MICROSOFT';\nclass GoogleSigninButtonDirective {\n  constructor(el, socialAuthService) {\n    this.type = 'icon';\n    this.size = 'medium';\n    this.text = 'signin_with';\n    this.shape = 'rectangular';\n    this.theme = 'outline';\n    this.logo_alignment = 'left';\n    this.width = '';\n    this.locale = '';\n    socialAuthService.initState.pipe(take(1)).subscribe(() => {\n      Promise.resolve(this.width).then(value => {\n        if (value > '400' || value < '200' && value != '') {\n          Promise.reject('Please note .. max-width 400 , min-width 200 ' + '(https://developers.google.com/identity/gsi/web/tools/configurator)');\n        } else {\n          google.accounts.id.renderButton(el.nativeElement, {\n            type: this.type,\n            size: this.size,\n            text: this.text,\n            width: this.width,\n            shape: this.shape,\n            theme: this.theme,\n            logo_alignment: this.logo_alignment,\n            locale: this.locale\n          });\n        }\n      });\n    });\n  }\n}\nGoogleSigninButtonDirective.ɵfac = function GoogleSigninButtonDirective_Factory(t) {\n  return new (t || GoogleSigninButtonDirective)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(SocialAuthService));\n};\nGoogleSigninButtonDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: GoogleSigninButtonDirective,\n  selectors: [[\"asl-google-signin-button\"]],\n  inputs: {\n    type: \"type\",\n    size: \"size\",\n    text: \"text\",\n    shape: \"shape\",\n    theme: \"theme\",\n    logo_alignment: \"logo_alignment\",\n    width: \"width\",\n    locale: \"locale\"\n  }\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(GoogleSigninButtonDirective, [{\n    type: Directive,\n    args: [{\n      // eslint-disable-next-line @angular-eslint/directive-selector\n      selector: 'asl-google-signin-button'\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: SocialAuthService\n    }];\n  }, {\n    type: [{\n      type: Input\n    }],\n    size: [{\n      type: Input\n    }],\n    text: [{\n      type: Input\n    }],\n    shape: [{\n      type: Input\n    }],\n    theme: [{\n      type: Input\n    }],\n    logo_alignment: [{\n      type: Input\n    }],\n    width: [{\n      type: Input\n    }],\n    locale: [{\n      type: Input\n    }]\n  });\n})();\nclass GoogleSigninButtonModule {}\nGoogleSigninButtonModule.ɵfac = function GoogleSigninButtonModule_Factory(t) {\n  return new (t || GoogleSigninButtonModule)();\n};\nGoogleSigninButtonModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: GoogleSigninButtonModule\n});\nGoogleSigninButtonModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(GoogleSigninButtonModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [GoogleSigninButtonDirective],\n      exports: [GoogleSigninButtonDirective]\n    }]\n  }], null, null);\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AmazonLoginProvider, BaseLoginProvider, DummyLoginProvider, FacebookLoginProvider, GoogleLoginProvider, GoogleSigninButtonDirective, GoogleSigninButtonModule, MicrosoftLoginProvider, SocialAuthService, SocialLoginModule, SocialUser, VKLoginProvider };","map":{"version":3,"names":["i0","EventEmitter","Injectable","Inject","NgModule","Optional","SkipSelf","Directive","Input","BehaviorSubject","ReplaySubject","AsyncSubject","isObservable","skip","filter","take","CommonModule","BaseLoginProvider","constructor","loadScript","id","src","onload","parentElement","document","getElementById","signInJS","createElement","async","head","appendChild","SocialUser","defaultInitOptions","oneTapEnabled","GoogleLoginProvider","clientId","initOptions","changeUser","_socialUser","_accessToken","_receivedAccessToken","pipe","subscribe","initialize","autoLogin","Promise","resolve","reject","PROVIDER_ID","google","accounts","client_id","auto_select","callback","credential","socialUser","createSocialUser","next","prompt_parent_id","itp_support","user","prompt","console","debug","scopes","scope","Array","s","join","_tokenClient","oauth2","initTokenClient","tokenResponse","error","code","description","error_description","uri","error_uri","access_token","err","getLoginStatus","value","refreshToken","revoke","response","getAccessToken","requestAccessToken","hint","email","revokeAccessToken","signIn","signOut","_this","_asyncToGenerator","disableAutoSelect","idToken","payload","decodeJwt","sub","name","photoUrl","picture","firstName","lastName","base64Url","split","base64","replace","jsonPayload","decodeURIComponent","window","atob","map","c","charCodeAt","toString","slice","JSON","parse","SocialAuthService","authState","_authState","asObservable","initState","_initState","config","_ngZone","_injector","providers","Map","_user","initialized","then","undefined","onError","forEach","item","set","provider","get","all","from","values","loginStatusPromises","loggedIn","key","promise","push","setUser","catch","run","finally","complete","providerId","_this2","providerObject","ERR_NOT_INITIALIZED","ERR_LOGIN_PROVIDER_NOT_FOUND","ERR_NOT_SUPPORTED_FOR_ACCESS_TOKEN","refreshAuthToken","ERR_NOT_SUPPORTED_FOR_REFRESH_TOKEN","refreshAccessToken","signInOptions","ERR_NOT_LOGGED_IN","ɵfac","SocialAuthService_Factory","t","ɵɵinject","NgZone","Injector","ɵprov","ɵɵdefineInjectable","token","factory","providedIn","ngDevMode","ɵsetClassMetadata","type","args","decorators","SocialLoginModule","ngModule","provide","useValue","parentModule","Error","SocialLoginModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","DummyLoginProvider","dummy","DEFAULT_USER","authToken","authorizationCode","FacebookLoginProvider","requestOptions","locale","fields","version","FB","init","appId","autoLogAppEvents","cookie","xfbml","status","authResponse","api","fbUser","accessToken","first_name","last_name","options","login","logout","AmazonLoginProvider","scope_data","profile","essential","redirect_uri","location","origin","amazonRoot","body","onAmazonLoginReady","amazon","Login","setClientId","retrieveToken","retrieveProfile","success","CustomerId","Name","PrimaryEmail","authorize","persistToken","clearToken","message","localStorage","setItem","getItem","removeItem","permissionTypes","notify","friends","photos","audio","video","offers","questions","pages","links","notes","messages","wall","ads","offline","docs","groups","notifications","stats","market","VKLoginProvider","VK_API_URL","VK_API_GET_USER","VK","apiId","getLoginStatusInternal","permissions","includes","warn","reduce","accumulator","current","index","Object","keys","findIndex","pt","signInInternal","Auth","loginResponse","getUser","session","mid","sid","userId","Api","call","user_id","v","userResponse","createUser","assign","photo_max","ProtocolMode","COMMON_AUTHORITY","MicrosoftLoginProvider","authority","knownAuthorities","protocolMode","AAD","clientCapabilities","cacheLocation","auth","redirectUri","cache","_instance","msal","PublicClientApplication","e","getSocialUser","meRequest","XMLHttpRequest","onreadystatechange","readyState","userInfo","responseText","idTokenClaims","account","username","givenName","surname","open","setRequestHeader","send","_this3","getAllAccounts","length","ssoSilent","loginHint","_this4","loginPopup","_this5","logoutPopup","postLogoutRedirectUri","logout_redirect_uri","href","GoogleSigninButtonDirective","el","socialAuthService","size","text","shape","theme","logo_alignment","width","renderButton","nativeElement","GoogleSigninButtonDirective_Factory","ɵɵdirectiveInject","ElementRef","ɵdir","ɵɵdefineDirective","selectors","inputs","selector","GoogleSigninButtonModule","GoogleSigninButtonModule_Factory","declarations","exports"],"sources":["C:/Users/SAGAR/VSCodes/Legal_Consulation_Angular/Legal_Consulation_Angular/node_modules/@abacritt/angularx-social-login/fesm2022/abacritt-angularx-social-login.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { EventEmitter, Injectable, Inject, NgModule, Optional, SkipSelf, Directive, Input } from '@angular/core';\nimport { BehaviorSubject, ReplaySubject, AsyncSubject, isObservable } from 'rxjs';\nimport { skip, filter, take } from 'rxjs/operators';\nimport { CommonModule } from '@angular/common';\n\nclass BaseLoginProvider {\n    constructor() { }\n    loadScript(id, src, onload, parentElement = null) {\n        // get document if platform is only browser\n        if (typeof document !== 'undefined' && !document.getElementById(id)) {\n            let signInJS = document.createElement('script');\n            signInJS.async = true;\n            signInJS.src = src;\n            signInJS.onload = onload;\n            if (!parentElement) {\n                parentElement = document.head;\n            }\n            parentElement.appendChild(signInJS);\n        }\n    }\n}\n\nclass SocialUser {\n}\n\nconst defaultInitOptions = {\n    oneTapEnabled: true,\n};\nclass GoogleLoginProvider extends BaseLoginProvider {\n    static { this.PROVIDER_ID = 'GOOGLE'; }\n    constructor(clientId, initOptions) {\n        super();\n        this.clientId = clientId;\n        this.initOptions = initOptions;\n        this.changeUser = new EventEmitter();\n        this._socialUser = new BehaviorSubject(null);\n        this._accessToken = new BehaviorSubject(null);\n        this._receivedAccessToken = new EventEmitter();\n        this.initOptions = { ...defaultInitOptions, ...this.initOptions };\n        // emit changeUser events but skip initial value from behaviorSubject\n        this._socialUser.pipe(skip(1)).subscribe(this.changeUser);\n        // emit receivedAccessToken but skip initial value from behaviorSubject\n        this._accessToken.pipe(skip(1)).subscribe(this._receivedAccessToken);\n    }\n    initialize(autoLogin) {\n        return new Promise((resolve, reject) => {\n            try {\n                this.loadScript(GoogleLoginProvider.PROVIDER_ID, 'https://accounts.google.com/gsi/client', () => {\n                    google.accounts.id.initialize({\n                        client_id: this.clientId,\n                        auto_select: autoLogin,\n                        callback: ({ credential }) => {\n                            const socialUser = this.createSocialUser(credential);\n                            this._socialUser.next(socialUser);\n                        },\n                        prompt_parent_id: this.initOptions?.prompt_parent_id,\n                        itp_support: this.initOptions.oneTapEnabled\n                    });\n                    if (this.initOptions.oneTapEnabled) {\n                        this._socialUser\n                            .pipe(filter((user) => user === null))\n                            .subscribe(() => google.accounts.id.prompt(console.debug));\n                    }\n                    if (this.initOptions.scopes) {\n                        const scope = this.initOptions.scopes instanceof Array\n                            ? this.initOptions.scopes.filter((s) => s).join(' ')\n                            : this.initOptions.scopes;\n                        this._tokenClient = google.accounts.oauth2.initTokenClient({\n                            client_id: this.clientId,\n                            scope,\n                            prompt: this.initOptions.prompt,\n                            callback: (tokenResponse) => {\n                                if (tokenResponse.error) {\n                                    this._accessToken.error({\n                                        code: tokenResponse.error,\n                                        description: tokenResponse.error_description,\n                                        uri: tokenResponse.error_uri,\n                                    });\n                                }\n                                else {\n                                    this._accessToken.next(tokenResponse.access_token);\n                                }\n                            },\n                        });\n                    }\n                    resolve();\n                });\n            }\n            catch (err) {\n                reject(err);\n            }\n        });\n    }\n    getLoginStatus() {\n        return new Promise((resolve, reject) => {\n            if (this._socialUser.value) {\n                resolve(this._socialUser.value);\n            }\n            else {\n                reject(`No user is currently logged in with ${GoogleLoginProvider.PROVIDER_ID}`);\n            }\n        });\n    }\n    refreshToken() {\n        return new Promise((resolve, reject) => {\n            google.accounts.id.revoke(this._socialUser.value.id, (response) => {\n                if (response.error)\n                    reject(response.error);\n                else\n                    resolve(this._socialUser.value);\n            });\n        });\n    }\n    getAccessToken() {\n        return new Promise((resolve, reject) => {\n            if (!this._tokenClient) {\n                if (this._socialUser.value) {\n                    reject('No token client was instantiated, you should specify some scopes.');\n                }\n                else {\n                    reject('You should be logged-in first.');\n                }\n            }\n            else {\n                this._tokenClient.requestAccessToken({\n                    hint: this._socialUser.value?.email,\n                });\n                this._receivedAccessToken.pipe(take(1)).subscribe(resolve);\n            }\n        });\n    }\n    revokeAccessToken() {\n        return new Promise((resolve, reject) => {\n            if (!this._tokenClient) {\n                reject('No token client was instantiated, you should specify some scopes.');\n            }\n            else if (!this._accessToken.value) {\n                reject('No access token to revoke');\n            }\n            else {\n                google.accounts.oauth2.revoke(this._accessToken.value, () => {\n                    this._accessToken.next(null);\n                    resolve();\n                });\n            }\n        });\n    }\n    signIn() {\n        return Promise.reject('You should not call this method directly for Google, use \"<asl-google-signin-button>\" wrapper ' +\n            'or generate the button yourself with \"google.accounts.id.renderButton()\" ' +\n            '(https://developers.google.com/identity/gsi/web/guides/display-button#javascript)');\n    }\n    async signOut() {\n        google.accounts.id.disableAutoSelect();\n        this._socialUser.next(null);\n    }\n    createSocialUser(idToken) {\n        const user = new SocialUser();\n        user.idToken = idToken;\n        const payload = this.decodeJwt(idToken);\n        user.id = payload.sub;\n        user.name = payload.name;\n        user.email = payload.email;\n        user.photoUrl = payload.picture;\n        user.firstName = payload['given_name'];\n        user.lastName = payload['family_name'];\n        return user;\n    }\n    decodeJwt(idToken) {\n        const base64Url = idToken.split(\".\")[1];\n        const base64 = base64Url.replace(/-/g, \"+\").replace(/_/g, \"/\");\n        const jsonPayload = decodeURIComponent(window.atob(base64)\n            .split(\"\")\n            .map(function (c) {\n            return \"%\" + (\"00\" + c.charCodeAt(0).toString(16)).slice(-2);\n        })\n            .join(\"\"));\n        return JSON.parse(jsonPayload);\n    }\n}\n\n/**\n * The service encapsulating the social login functionality. Exposes methods like\n * `signIn`, `signOut`. Also, exposes an `authState` `Observable` that one can\n * subscribe to get the current logged in user information.\n *\n * @dynamic\n */\nclass SocialAuthService {\n    static { this.ERR_LOGIN_PROVIDER_NOT_FOUND = 'Login provider not found'; }\n    static { this.ERR_NOT_LOGGED_IN = 'Not logged in'; }\n    static { this.ERR_NOT_INITIALIZED = 'Login providers not ready yet. Are there errors on your console?'; }\n    static { this.ERR_NOT_SUPPORTED_FOR_REFRESH_TOKEN = 'Chosen login provider is not supported for refreshing a token'; }\n    static { this.ERR_NOT_SUPPORTED_FOR_ACCESS_TOKEN = 'Chosen login provider is not supported for getting an access token'; }\n    /** An `Observable` that one can subscribe to get the current logged in user information */\n    get authState() {\n        return this._authState.asObservable();\n    }\n    /** An `Observable` to communicate the readiness of the service and associated login providers */\n    get initState() {\n        return this._initState.asObservable();\n    }\n    /**\n     * @param config A `SocialAuthServiceConfig` object or a `Promise` that resolves to a `SocialAuthServiceConfig` object\n     */\n    constructor(config, _ngZone, _injector) {\n        this._ngZone = _ngZone;\n        this._injector = _injector;\n        this.providers = new Map();\n        this.autoLogin = false;\n        this._user = null;\n        this._authState = new ReplaySubject(1);\n        /* Consider making this an enum comprising LOADING, LOADED, FAILED etc. */\n        this.initialized = false;\n        this._initState = new AsyncSubject();\n        if (config instanceof Promise) {\n            config.then((config) => {\n                this.initialize(config);\n            });\n        }\n        else {\n            this.initialize(config);\n        }\n    }\n    initialize(config) {\n        this.autoLogin = config.autoLogin !== undefined ? config.autoLogin : false;\n        const { onError = console.error } = config;\n        config.providers.forEach((item) => {\n            this.providers.set(item.id, 'prototype' in item.provider\n                ? this._injector.get(item.provider)\n                : item.provider);\n        });\n        Promise.all(Array.from(this.providers.values()).map((provider) => provider.initialize(this.autoLogin)))\n            .then(() => {\n            if (this.autoLogin) {\n                const loginStatusPromises = [];\n                let loggedIn = false;\n                this.providers.forEach((provider, key) => {\n                    const promise = provider.getLoginStatus();\n                    loginStatusPromises.push(promise);\n                    promise\n                        .then((user) => {\n                        this.setUser(user, key);\n                        loggedIn = true;\n                    })\n                        .catch(console.debug);\n                });\n                Promise.all(loginStatusPromises).catch(() => {\n                    if (!loggedIn) {\n                        this._user = null;\n                        this._authState.next(null);\n                    }\n                });\n            }\n            this.providers.forEach((provider, key) => {\n                if (isObservable(provider.changeUser)) {\n                    provider.changeUser.subscribe((user) => {\n                        this._ngZone.run(() => {\n                            this.setUser(user, key);\n                        });\n                    });\n                }\n            });\n        })\n            .catch((error) => {\n            onError(error);\n        })\n            .finally(() => {\n            this.initialized = true;\n            this._initState.next(this.initialized);\n            this._initState.complete();\n        });\n    }\n    async getAccessToken(providerId) {\n        const providerObject = this.providers.get(providerId);\n        if (!this.initialized) {\n            throw SocialAuthService.ERR_NOT_INITIALIZED;\n        }\n        else if (!providerObject) {\n            throw SocialAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND;\n        }\n        else if (!(providerObject instanceof GoogleLoginProvider)) {\n            throw SocialAuthService.ERR_NOT_SUPPORTED_FOR_ACCESS_TOKEN;\n        }\n        return await providerObject.getAccessToken();\n    }\n    refreshAuthToken(providerId) {\n        return new Promise((resolve, reject) => {\n            if (!this.initialized) {\n                reject(SocialAuthService.ERR_NOT_INITIALIZED);\n            }\n            else {\n                const providerObject = this.providers.get(providerId);\n                if (providerObject) {\n                    if (typeof providerObject.refreshToken !== 'function') {\n                        reject(SocialAuthService.ERR_NOT_SUPPORTED_FOR_REFRESH_TOKEN);\n                    }\n                    else {\n                        providerObject\n                            .refreshToken()\n                            .then((user) => {\n                            this.setUser(user, providerId);\n                            resolve();\n                        })\n                            .catch((err) => {\n                            reject(err);\n                        });\n                    }\n                }\n                else {\n                    reject(SocialAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND);\n                }\n            }\n        });\n    }\n    refreshAccessToken(providerId) {\n        return new Promise((resolve, reject) => {\n            if (!this.initialized) {\n                reject(SocialAuthService.ERR_NOT_INITIALIZED);\n            }\n            else if (providerId !== GoogleLoginProvider.PROVIDER_ID) {\n                reject(SocialAuthService.ERR_NOT_SUPPORTED_FOR_REFRESH_TOKEN);\n            }\n            else {\n                const providerObject = this.providers.get(providerId);\n                if (providerObject instanceof GoogleLoginProvider) {\n                    providerObject.revokeAccessToken().then(resolve).catch(reject);\n                }\n                else {\n                    reject(SocialAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND);\n                }\n            }\n        });\n    }\n    /**\n     * A method used to sign in a user with a specific `LoginProvider`.\n     *\n     * @param providerId Id with which the `LoginProvider` has been registered with the service\n     * @param signInOptions Optional `LoginProvider` specific arguments\n     * @returns A `Promise` that resolves to the authenticated user information\n     */\n    signIn(providerId, signInOptions) {\n        return new Promise((resolve, reject) => {\n            if (!this.initialized) {\n                reject(SocialAuthService.ERR_NOT_INITIALIZED);\n            }\n            else {\n                let providerObject = this.providers.get(providerId);\n                if (providerObject) {\n                    providerObject\n                        .signIn(signInOptions)\n                        .then((user) => {\n                        this.setUser(user, providerId);\n                        resolve(user);\n                    })\n                        .catch((err) => {\n                        reject(err);\n                    });\n                }\n                else {\n                    reject(SocialAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND);\n                }\n            }\n        });\n    }\n    /**\n     * A method used to sign out the currently loggen in user.\n     *\n     * @param revoke Optional parameter to specify whether a hard sign out is to be performed\n     * @returns A `Promise` that resolves if the operation is successful, rejects otherwise\n     */\n    signOut(revoke = false) {\n        return new Promise((resolve, reject) => {\n            if (!this.initialized) {\n                reject(SocialAuthService.ERR_NOT_INITIALIZED);\n            }\n            else if (!this._user) {\n                reject(SocialAuthService.ERR_NOT_LOGGED_IN);\n            }\n            else {\n                let providerId = this._user.provider;\n                let providerObject = this.providers.get(providerId);\n                if (providerObject) {\n                    providerObject\n                        .signOut(revoke)\n                        .then(() => {\n                        resolve();\n                        this.setUser(null);\n                    })\n                        .catch((err) => {\n                        reject(err);\n                    });\n                }\n                else {\n                    reject(SocialAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND);\n                }\n            }\n        });\n    }\n    setUser(user, id) {\n        if (user && id)\n            user.provider = id;\n        this._user = user;\n        this._authState.next(user);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: SocialAuthService, deps: [{ token: 'SocialAuthServiceConfig' }, { token: i0.NgZone }, { token: i0.Injector }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: SocialAuthService, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: SocialAuthService, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: ['SocialAuthServiceConfig']\n                }] }, { type: i0.NgZone }, { type: i0.Injector }]; } });\n\n/**\n * The main module of angularx-social-login library.\n */\nclass SocialLoginModule {\n    static initialize(config) {\n        return {\n            ngModule: SocialLoginModule,\n            providers: [\n                SocialAuthService,\n                {\n                    provide: 'SocialAuthServiceConfig',\n                    useValue: config\n                }\n            ]\n        };\n    }\n    constructor(parentModule) {\n        if (parentModule) {\n            throw new Error('SocialLoginModule is already loaded. Import it in the AppModule only');\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: SocialLoginModule, deps: [{ token: SocialLoginModule, optional: true, skipSelf: true }], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.0\", ngImport: i0, type: SocialLoginModule, imports: [CommonModule] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: SocialLoginModule, providers: [SocialAuthService], imports: [CommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: SocialLoginModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule],\n                    providers: [SocialAuthService],\n                }]\n        }], ctorParameters: function () { return [{ type: SocialLoginModule, decorators: [{\n                    type: Optional\n                }, {\n                    type: SkipSelf\n                }] }]; } });\n\n// Simulates login / logout without actually requiring an Internet connection.\n//\n// Useful for certain development situations.\n//\n// For example, if you want to simulate the greatest football referee England has ever produced:\n//\n//  const dummyUser: SocialUser = {\n//     id: '0123456789',\n//     name: 'Howard Webb',\n//     email: 'howard@webb.com',\n//     firstName: 'Howard',\n//     lastName: 'Webb',\n//     authToken: 'dummyAuthToken',\n//     photoUrl: 'https://en.wikipedia.org/wiki/Howard_Webb#/media/File:Howard_Webb_march11.jpg',\n//     provider: 'DUMMY',\n//     idToken: 'dummyIdToken',\n//     authorizationCode: 'dummyAuthCode'\n// };\n//\n//  let config = new AuthServiceConfig([\n//  { ... },\n//  {\n//       id: DummyLoginProvider.PROVIDER_ID,\n//       provider: new DummyLoginProvider(dummyUser)  // Pass your user into the constructor\n//   },\n//  { ... }\n//  ]);\nclass DummyLoginProvider extends BaseLoginProvider {\n    static { this.PROVIDER_ID = 'DUMMY'; }\n    static { this.DEFAULT_USER = {\n        id: '1234567890',\n        name: 'Mickey Mouse',\n        email: 'mickey@mouse.com',\n        firstName: 'Mickey',\n        lastName: 'Mouse',\n        authToken: 'dummyAuthToken',\n        photoUrl: 'https://en.wikipedia.org/wiki/File:Mickey_Mouse.png',\n        provider: 'DUMMY',\n        idToken: 'dummyIdToken',\n        authorizationCode: 'dummyAuthCode',\n        response: {},\n    }; }\n    constructor(dummy) {\n        super();\n        if (dummy) {\n            this.dummy = dummy;\n        }\n        else {\n            this.dummy = DummyLoginProvider.DEFAULT_USER;\n        }\n        // Start not logged in\n        this.loggedIn = false;\n    }\n    getLoginStatus() {\n        return new Promise((resolve, reject) => {\n            if (this.loggedIn) {\n                resolve(this.dummy);\n            }\n            else {\n                reject('No user is currently logged in.');\n            }\n        });\n    }\n    initialize() {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    }\n    signIn() {\n        return new Promise((resolve, reject) => {\n            this.loggedIn = true;\n            resolve(this.dummy);\n        });\n    }\n    signOut(revoke) {\n        return new Promise((resolve, reject) => {\n            this.loggedIn = false;\n            resolve();\n        });\n    }\n}\n\nclass FacebookLoginProvider extends BaseLoginProvider {\n    static { this.PROVIDER_ID = 'FACEBOOK'; }\n    constructor(clientId, initOptions = {}) {\n        super();\n        this.clientId = clientId;\n        this.requestOptions = {\n            scope: 'email,public_profile',\n            locale: 'en_US',\n            fields: 'name,email,picture,first_name,last_name',\n            version: 'v10.0',\n        };\n        this.requestOptions = {\n            ...this.requestOptions,\n            ...initOptions,\n        };\n    }\n    initialize() {\n        return new Promise((resolve, reject) => {\n            try {\n                this.loadScript(FacebookLoginProvider.PROVIDER_ID, `//connect.facebook.net/${this.requestOptions.locale}/sdk.js`, () => {\n                    FB.init({\n                        appId: this.clientId,\n                        autoLogAppEvents: true,\n                        cookie: true,\n                        xfbml: true,\n                        version: this.requestOptions.version,\n                    });\n                    resolve();\n                });\n            }\n            catch (err) {\n                reject(err);\n            }\n        });\n    }\n    getLoginStatus() {\n        return new Promise((resolve, reject) => {\n            FB.getLoginStatus((response) => {\n                if (response.status === 'connected') {\n                    let authResponse = response.authResponse;\n                    FB.api(`/me?fields=${this.requestOptions.fields}`, (fbUser) => {\n                        let user = new SocialUser();\n                        user.id = fbUser.id;\n                        user.name = fbUser.name;\n                        user.email = fbUser.email;\n                        user.photoUrl =\n                            'https://graph.facebook.com/' +\n                                fbUser.id +\n                                '/picture?type=normal&access_token=' +\n                                authResponse.accessToken;\n                        user.firstName = fbUser.first_name;\n                        user.lastName = fbUser.last_name;\n                        user.authToken = authResponse.accessToken;\n                        user.response = fbUser;\n                        resolve(user);\n                    });\n                }\n                else {\n                    reject(`No user is currently logged in with ${FacebookLoginProvider.PROVIDER_ID}`);\n                }\n            });\n        });\n    }\n    signIn(signInOptions) {\n        const options = { ...this.requestOptions, ...signInOptions };\n        return new Promise((resolve, reject) => {\n            FB.login((response) => {\n                if (response.authResponse) {\n                    let authResponse = response.authResponse;\n                    FB.api(`/me?fields=${options.fields}`, (fbUser) => {\n                        let user = new SocialUser();\n                        user.id = fbUser.id;\n                        user.name = fbUser.name;\n                        user.email = fbUser.email;\n                        user.photoUrl =\n                            'https://graph.facebook.com/' +\n                                fbUser.id +\n                                '/picture?type=normal';\n                        user.firstName = fbUser.first_name;\n                        user.lastName = fbUser.last_name;\n                        user.authToken = authResponse.accessToken;\n                        user.response = fbUser;\n                        resolve(user);\n                    });\n                }\n                else {\n                    reject('User cancelled login or did not fully authorize.');\n                }\n            }, options);\n        });\n    }\n    signOut() {\n        return new Promise((resolve, reject) => {\n            FB.logout((response) => {\n                resolve();\n            });\n        });\n    }\n}\n\nclass AmazonLoginProvider extends BaseLoginProvider {\n    static { this.PROVIDER_ID = 'AMAZON'; }\n    constructor(clientId, initOptions = {\n        scope: 'profile',\n        scope_data: {\n            profile: { essential: false },\n        },\n        redirect_uri: location.origin,\n    }) {\n        super();\n        this.clientId = clientId;\n        this.initOptions = initOptions;\n    }\n    initialize() {\n        let amazonRoot = null;\n        if (document) {\n            amazonRoot = document.createElement('div');\n            amazonRoot.id = 'amazon-root';\n            document.body.appendChild(amazonRoot);\n        }\n        window.onAmazonLoginReady = () => {\n            amazon.Login.setClientId(this.clientId);\n        };\n        return new Promise((resolve, reject) => {\n            try {\n                this.loadScript('amazon-login-sdk', 'https://assets.loginwithamazon.com/sdk/na/login1.js', () => {\n                    resolve();\n                }, amazonRoot);\n            }\n            catch (err) {\n                reject(err);\n            }\n        });\n    }\n    getLoginStatus() {\n        return new Promise((resolve, reject) => {\n            let token = this.retrieveToken();\n            if (token) {\n                amazon.Login.retrieveProfile(token, (response) => {\n                    if (response.success) {\n                        let user = new SocialUser();\n                        user.id = response.profile.CustomerId;\n                        user.name = response.profile.Name;\n                        user.email = response.profile.PrimaryEmail;\n                        user.response = response.profile;\n                        resolve(user);\n                    }\n                    else {\n                        reject(response.error);\n                    }\n                });\n            }\n            else {\n                reject(`No user is currently logged in with ${AmazonLoginProvider.PROVIDER_ID}`);\n            }\n        });\n    }\n    signIn(signInOptions) {\n        const options = { ...this.initOptions, ...signInOptions };\n        return new Promise((resolve, reject) => {\n            amazon.Login.authorize(options, (authResponse) => {\n                if (authResponse.error) {\n                    reject(authResponse.error);\n                }\n                else {\n                    amazon.Login.retrieveProfile(authResponse.access_token, (response) => {\n                        let user = new SocialUser();\n                        user.id = response.profile.CustomerId;\n                        user.name = response.profile.Name;\n                        user.email = response.profile.PrimaryEmail;\n                        user.authToken = authResponse.access_token;\n                        user.response = response.profile;\n                        this.persistToken(authResponse.access_token);\n                        resolve(user);\n                    });\n                }\n            });\n        });\n    }\n    signOut() {\n        return new Promise((resolve, reject) => {\n            try {\n                amazon.Login.logout();\n                this.clearToken();\n                resolve();\n            }\n            catch (err) {\n                reject(err.message);\n            }\n        });\n    }\n    persistToken(token) {\n        localStorage.setItem(`${AmazonLoginProvider.PROVIDER_ID}_token`, token);\n    }\n    retrieveToken() {\n        return localStorage.getItem(`${AmazonLoginProvider.PROVIDER_ID}_token`);\n    }\n    clearToken() {\n        localStorage.removeItem(`${AmazonLoginProvider.PROVIDER_ID}_token`);\n    }\n}\n\nconst permissionTypes = {\n    notify: 1,\n    friends: 2,\n    photos: 4,\n    audio: 8,\n    video: 16,\n    offers: 32,\n    questions: 64,\n    pages: 128,\n    links: 256,\n    status: 1024,\n    notes: 2048,\n    messages: 4096,\n    wall: 8192,\n    ads: 32768,\n    offline: 65536,\n    docs: 131072,\n    groups: 262144,\n    notifications: 524288,\n    stats: 1048576,\n    email: 4194304,\n    market: 134217728\n};\nclass VKLoginProvider extends BaseLoginProvider {\n    constructor(clientId, initOptions = {\n        fields: 'photo_max,contacts',\n        version: '5.131',\n    }) {\n        super();\n        this.clientId = clientId;\n        this.initOptions = initOptions;\n        this.VK_API_URL = '//vk.com/js/api/openapi.js';\n        this.VK_API_GET_USER = 'users.get';\n    }\n    static { this.PROVIDER_ID = 'VK'; }\n    initialize() {\n        return new Promise((resolve, reject) => {\n            try {\n                this.loadScript(VKLoginProvider.PROVIDER_ID, this.VK_API_URL, () => {\n                    VK.init({\n                        apiId: this.clientId,\n                    });\n                    resolve();\n                });\n            }\n            catch (err) {\n                reject(err);\n            }\n        });\n    }\n    getLoginStatus() {\n        return new Promise((resolve) => this.getLoginStatusInternal(resolve));\n    }\n    signIn(permissions) {\n        if (permissions?.includes('offers')) {\n            console.warn('The \"offers\" permission is outdated.');\n        }\n        if (permissions?.includes('questions')) {\n            console.warn('The \"questions\" permission is outdated.');\n        }\n        if (permissions?.includes('messages')) {\n            console.warn('The \"messages\" permission is unavailable for non-standalone applications.');\n        }\n        const scope = permissions?.reduce((accumulator, current) => {\n            const index = Object.keys(permissionTypes).findIndex(pt => pt === current);\n            return index > -1 ? accumulator + permissionTypes[current] : 0;\n        }, 0);\n        return new Promise((resolve) => this.signInInternal(resolve, scope));\n    }\n    signOut() {\n        return new Promise((resolve) => {\n            VK.Auth.logout(() => {\n                resolve();\n            });\n        });\n    }\n    signInInternal(resolve, scope) {\n        VK.Auth.login((loginResponse) => {\n            if (loginResponse.status === 'connected') {\n                this.getUser(loginResponse.session.mid, loginResponse.session.sid, resolve);\n            }\n        }, scope);\n    }\n    getUser(userId, token, resolve) {\n        VK.Api.call(this.VK_API_GET_USER, {\n            user_id: userId,\n            fields: this.initOptions.fields,\n            v: this.initOptions.version,\n        }, (userResponse) => {\n            resolve(this.createUser(Object.assign({}, { token }, userResponse.response[0])));\n        });\n    }\n    getLoginStatusInternal(resolve) {\n        VK.Auth.getLoginStatus((loginResponse) => {\n            if (loginResponse.status === 'connected') {\n                this.getUser(loginResponse.session.mid, loginResponse.session.sid, resolve);\n            }\n        });\n    }\n    createUser(response) {\n        const user = new SocialUser();\n        user.id = response.id;\n        user.name = `${response.first_name} ${response.last_name}`;\n        user.photoUrl = response.photo_max;\n        user.authToken = response.token;\n        return user;\n    }\n}\n\n/**\n * Protocol modes supported by MSAL.\n */\nvar ProtocolMode;\n(function (ProtocolMode) {\n    ProtocolMode[\"AAD\"] = \"AAD\";\n    ProtocolMode[\"OIDC\"] = \"OIDC\";\n})(ProtocolMode || (ProtocolMode = {}));\nconst COMMON_AUTHORITY = 'https://login.microsoftonline.com/common/';\n/**\n * Microsoft Authentication using MSAL v2: https://github.com/AzureAD/microsoft-authentication-library-for-js/tree/dev/lib/msal-browser\n */\nclass MicrosoftLoginProvider extends BaseLoginProvider {\n    static { this.PROVIDER_ID = 'MICROSOFT'; }\n    constructor(clientId, initOptions) {\n        super();\n        this.clientId = clientId;\n        this.initOptions = {\n            authority: COMMON_AUTHORITY,\n            scopes: ['openid', 'email', 'profile', 'User.Read'],\n            knownAuthorities: [],\n            protocolMode: ProtocolMode.AAD,\n            clientCapabilities: [],\n            cacheLocation: 'sessionStorage'\n        };\n        this.initOptions = {\n            ...this.initOptions,\n            ...initOptions\n        };\n    }\n    initialize() {\n        return new Promise((resolve, reject) => {\n            this.loadScript(MicrosoftLoginProvider.PROVIDER_ID, 'https://alcdn.msauth.net/browser/2.13.1/js/msal-browser.min.js', () => {\n                try {\n                    const config = {\n                        auth: {\n                            clientId: this.clientId,\n                            redirectUri: this.initOptions.redirect_uri ?? location.origin,\n                            authority: this.initOptions.authority,\n                            knownAuthorities: this.initOptions.knownAuthorities,\n                            protocolMode: this.initOptions.protocolMode,\n                            clientCapabilities: this.initOptions.clientCapabilities\n                        },\n                        cache: !this.initOptions.cacheLocation ? null : {\n                            cacheLocation: this.initOptions.cacheLocation\n                        }\n                    };\n                    this._instance = new msal.PublicClientApplication(config);\n                    resolve();\n                }\n                catch (e) {\n                    reject(e);\n                }\n            });\n        });\n    }\n    getSocialUser(loginResponse) {\n        return new Promise((resolve, reject) => {\n            //After login, use Microsoft Graph API to get user info\n            let meRequest = new XMLHttpRequest();\n            meRequest.onreadystatechange = () => {\n                if (meRequest.readyState == 4) {\n                    try {\n                        if (meRequest.status == 200) {\n                            let userInfo = JSON.parse(meRequest.responseText);\n                            let user = new SocialUser();\n                            user.provider = MicrosoftLoginProvider.PROVIDER_ID;\n                            user.id = loginResponse.idToken;\n                            user.authToken = loginResponse.accessToken;\n                            user.name = loginResponse.idTokenClaims.name;\n                            user.email = loginResponse.account.username;\n                            user.idToken = loginResponse.idToken;\n                            user.response = loginResponse;\n                            user.firstName = userInfo.givenName;\n                            user.lastName = userInfo.surname;\n                            resolve(user);\n                        }\n                        else {\n                            reject(`Error retrieving user info: ${meRequest.status}`);\n                        }\n                    }\n                    catch (err) {\n                        reject(err);\n                    }\n                }\n            };\n            //Microsoft Graph ME Endpoint: https://docs.microsoft.com/en-us/graph/api/user-get?view=graph-rest-1.0&tabs=http\n            meRequest.open('GET', 'https://graph.microsoft.com/v1.0/me');\n            meRequest.setRequestHeader('Authorization', `Bearer ${loginResponse.accessToken}`);\n            try {\n                meRequest.send();\n            }\n            catch (err) {\n                reject(err);\n            }\n        });\n    }\n    async getLoginStatus() {\n        const accounts = this._instance.getAllAccounts();\n        if (accounts?.length > 0) {\n            const loginResponse = await this._instance.ssoSilent({\n                scopes: this.initOptions.scopes,\n                loginHint: accounts[0].username\n            });\n            return await this.getSocialUser(loginResponse);\n        }\n        else {\n            throw `No user is currently logged in with ${MicrosoftLoginProvider.PROVIDER_ID}`;\n        }\n    }\n    async signIn() {\n        const loginResponse = await this._instance.loginPopup({\n            scopes: this.initOptions.scopes,\n            prompt: this.initOptions.prompt,\n        });\n        return await this.getSocialUser(loginResponse);\n    }\n    async signOut(revoke) {\n        const accounts = this._instance.getAllAccounts();\n        if (accounts?.length > 0) {\n            await this._instance.logoutPopup({\n                account: accounts[0],\n                postLogoutRedirectUri: this.initOptions.logout_redirect_uri ?? this.initOptions.redirect_uri ?? location.href\n            });\n        }\n    }\n}\n\nclass GoogleSigninButtonDirective {\n    constructor(el, socialAuthService) {\n        this.type = 'icon';\n        this.size = 'medium';\n        this.text = 'signin_with';\n        this.shape = 'rectangular';\n        this.theme = 'outline';\n        this.logo_alignment = 'left';\n        this.width = '';\n        this.locale = '';\n        socialAuthService.initState.pipe(take(1)).subscribe(() => {\n            Promise.resolve(this.width).then((value) => {\n                if (value > '400' || (value < '200' && value != '')) {\n                    Promise.reject('Please note .. max-width 400 , min-width 200 ' +\n                        '(https://developers.google.com/identity/gsi/web/tools/configurator)');\n                }\n                else {\n                    google.accounts.id.renderButton(el.nativeElement, {\n                        type: this.type,\n                        size: this.size,\n                        text: this.text,\n                        width: this.width,\n                        shape: this.shape,\n                        theme: this.theme,\n                        logo_alignment: this.logo_alignment,\n                        locale: this.locale,\n                    });\n                }\n            });\n        });\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: GoogleSigninButtonDirective, deps: [{ token: i0.ElementRef }, { token: SocialAuthService }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.0.0\", type: GoogleSigninButtonDirective, selector: \"asl-google-signin-button\", inputs: { type: \"type\", size: \"size\", text: \"text\", shape: \"shape\", theme: \"theme\", logo_alignment: \"logo_alignment\", width: \"width\", locale: \"locale\" }, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: GoogleSigninButtonDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    // eslint-disable-next-line @angular-eslint/directive-selector\n                    selector: 'asl-google-signin-button',\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: SocialAuthService }]; }, propDecorators: { type: [{\n                type: Input\n            }], size: [{\n                type: Input\n            }], text: [{\n                type: Input\n            }], shape: [{\n                type: Input\n            }], theme: [{\n                type: Input\n            }], logo_alignment: [{\n                type: Input\n            }], width: [{\n                type: Input\n            }], locale: [{\n                type: Input\n            }] } });\n\nclass GoogleSigninButtonModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: GoogleSigninButtonModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.0\", ngImport: i0, type: GoogleSigninButtonModule, declarations: [GoogleSigninButtonDirective], exports: [GoogleSigninButtonDirective] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: GoogleSigninButtonModule }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: GoogleSigninButtonModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [GoogleSigninButtonDirective],\n                    exports: [GoogleSigninButtonDirective],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AmazonLoginProvider, BaseLoginProvider, DummyLoginProvider, FacebookLoginProvider, GoogleLoginProvider, GoogleSigninButtonDirective, GoogleSigninButtonModule, MicrosoftLoginProvider, SocialAuthService, SocialLoginModule, SocialUser, VKLoginProvider };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}